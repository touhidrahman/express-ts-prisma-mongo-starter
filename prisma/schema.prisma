generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

model EmailChange {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @default(uuid())
  newEmail   String
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime
}

model EmailVerification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @default(uuid())
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime
}

model PasswordReset {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @default(uuid())
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email         String    @unique
  password      String
  firstName     String
  lastName      String
  image         String?
  birthDate     DateTime? @db.Date
  role          UserRole  @default(USER)
  emailVerified Boolean   @default(false)
  disabled      Boolean   @default(false)
  bio           String?
  gender        Gender?
  city          String?
  country       String?

  emailChange           EmailChange?
  emailVerification     EmailVerification?
  passwordReset         PasswordReset?
  sessions              Session[]
  likes                 Like[]
  posts                 Post[]
  sentConversations     Conversation[]     @relation("sentConversations")
  sentMessages          Message[]          @relation("sentMessages")
  receivedConversations Conversation[]     @relation("receivedConversations")
  receivedMessages      Message[]          @relation("receivedMessages")
  comments              Comment[]
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAgent String
  userId    String  @db.ObjectId
  valid     Boolean @default(true)

  user User @relation(fields: [userId], references: [id])
}

model Asset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  size      Int
  mimetype  String
  bucket    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Models for your application

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title    String
  content  String
  authorId String    @db.ObjectId
  likes    Like[]
  comments Comment[]

  author User @relation(fields: [authorId], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content  String
  authorId String @db.ObjectId
  postId   String @db.ObjectId

  author User @relation(fields: [authorId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  postId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId   String    @db.ObjectId
  receiverId String    @db.ObjectId
  messages   Message[]

  sender   User @relation("sentConversations", fields: [senderId], references: [id])
  receiver User @relation("receivedConversations", fields: [receiverId], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId       String @db.ObjectId
  receiverId     String @db.ObjectId
  conversationId String @db.ObjectId
  text           String

  sender       User         @relation("sentMessages", fields: [senderId], references: [id])
  receiver     User         @relation("receivedMessages", fields: [receiverId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

enum Gender {
  Male
  Female
}

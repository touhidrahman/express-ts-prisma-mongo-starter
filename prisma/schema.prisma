generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

model EmailChange {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @default(uuid())
  newEmail   String
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime
}

model EmailVerification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @default(uuid())
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime
}

model PasswordReset {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @default(uuid())
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email         String    @unique
  password      String
  firstName     String
  lastName      String
  image         String?
  birthDate     DateTime? @db.Date
  role          UserRole  @default(USER)
  emailVerified Boolean   @default(false)

  emailChange           EmailChange?
  emailVerification     EmailVerification?
  passwordReset         PasswordReset?
  profile               Profile?
  sessions              Session[]
  likes                 Like[]
  sentConversations     Conversation[]     @relation("sentConversations")
  sentMessages          Message[]          @relation("sentMessages")
  receivedConversations Conversation[]     @relation("receivedConversations")
  receivedMessages      Message[]          @relation("receivedMessages")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAgent String
  userId    String  @db.ObjectId
  valid     Boolean @default(true)

  user User @relation(fields: [userId], references: [id])
}

model Asset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  size      Int
  mimetype  String
  bucket    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Models for your application

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bio         String?
  gender      Gender
  city        String?
  country     String?
  expiryDate  DateTime?
  package     ProductPackage
  publishDate DateTime       @default(now())
  published   Boolean        @default(false)
  userId      String?        @unique

  likes Like[]
  user  User?  @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String @db.ObjectId
  profileId String @db.ObjectId

  user    User    @relation(fields: [userId], references: [id])
  profile Profile @relation(fields: [profileId], references: [id])
}

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId   String    @db.ObjectId
  receiverId String    @db.ObjectId
  messages   Message[]

  sender   User @relation("sentConversations", fields: [senderId], references: [id])
  receiver User @relation("receivedConversations", fields: [receiverId], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId       String @db.ObjectId
  receiverId     String @db.ObjectId
  conversationId String @db.ObjectId
  text           String

  sender       User         @relation("sentMessages", fields: [senderId], references: [id])
  receiver     User         @relation("receivedMessages", fields: [receiverId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

enum Gender {
  Male
  Female
}

enum ProductPackage {
  Free
  Bronze
  Silver
  Gold
}

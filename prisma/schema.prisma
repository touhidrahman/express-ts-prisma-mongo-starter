generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

model EmailChange {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @default(uuid())
  newEmail   String
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime
}

model EmailVerification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @default(uuid())
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime
}

model PasswordReset {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @default(uuid())
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  image         String?
  birthDate     DateTime? @db.Date
  role          UserRole  @default(USER)
  emailVerified Boolean   @default(false)

  emailChange       EmailChange?
  emailVerification EmailVerification?
  passwordReset     PasswordReset?
  posts             Post[]
  sessions          Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userAgent String
  userId    String  @db.ObjectId
  valid     Boolean @default(true)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Asset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  size      Int
  mimetype  String
  bucket    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Models for your application

model Post {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String?
  published Boolean @default(false)
  viewCount Int     @default(0)
  authorId  String?

  author User? @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

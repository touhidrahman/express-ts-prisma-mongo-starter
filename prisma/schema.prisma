generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum Plan {
  BASIC
  PRO
  PREMIUM
}

model EmailChange {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @default(uuid())
  newEmail   String
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime
}

model EmailVerification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @default(uuid())
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime
}

model PasswordReset {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @default(uuid())
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  image         String?
  quota         Int       @default(1000000000) // 1GB
  usedSpace     Int       @default(0)
  plan          Plan      @default(BASIC)
  birthDate     DateTime? @db.Date
  role          UserRole  @default(USER)
  emailVerified Boolean   @default(false)

  emailChange       EmailChange?
  emailVerification EmailVerification?
  passwordReset     PasswordReset?
  docs              Doc[]
  sessions          Session[]
  authors           Author[]
  tags              Tag[]
  bookmarks         Bookmark[]
  notes             Note[]
  assets            Asset[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userAgent String
  userId    String  @db.ObjectId
  valid     Boolean @default(true)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Asset {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  url      String
  size     Int
  mimetype String
  bucket   String?
  docId    String? @db.ObjectId
  userId   String? @db.ObjectId

  doc  Doc?  @relation(fields: [docId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doc {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  publishedOn DateTime?
  rating      Int       @default(0)
  readPage    Int       @default(0)
  totalPages  Int?
  authorId    String?   @db.ObjectId
  userId      String?   @db.ObjectId

  author    Author?    @relation(fields: [authorId], references: [id])
  user      User?      @relation(fields: [userId], references: [id])
  assets    Asset[]
  tags      Tag[]
  bookmarks Bookmark[]
  notes     Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Author {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  image  String?
  userId String? @db.ObjectId

  user User? @relation(fields: [userId], references: [id])
  docs Doc[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  image  String?
  userId String? @db.ObjectId
  docId  String? @db.ObjectId

  user User? @relation(fields: [userId], references: [id])
  doc  Doc?  @relation(fields: [docId], references: [id])
}

model Bookmark {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  docId       String @db.ObjectId
  name        String
  page        Int
  pagePostion Int    @default(0)

  user User? @relation(fields: [userId], references: [id])
  doc  Doc?  @relation(fields: [docId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  docId       String @db.ObjectId
  content     String
  page        Int
  pagePostion Int    @default(0)

  user User? @relation(fields: [userId], references: [id])
  doc  Doc?  @relation(fields: [docId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
